use std::{path::Path, process::exit, fs::{OpenOptions, File}, io::Write};

use ipnet::Ipv4Net;
use paris::{error, info};

use crate::{database::Database, env};

pub struct Wireguard {
    database: Database,
    private_key: wireguard_keys::Privkey,
    endpoint: String,
    config_file: String,
}

impl Wireguard {
    pub fn new(database: Database, endpoint: String) -> Self {
        let config_file = env::get_wg_config();

        let key = database.get_wireguard_private_key();

        Self {
            private_key: key,
            endpoint,
            config_file,
            database,
        }
    }

    pub fn regenerate_config(&self) {
        match File::create(&self.config_file) {
            Ok(mut file) => {
                let _ = file.write(self.generate_server_config().as_bytes());
                
                for client in self.database.get_clients() {
                    self.add_peer(client.wg_public_key, client.wg_psk, client.ipv4_address);
                }
            },
            Err(error) => {
                error!("Unable to write into {}: {}", self.config_file, error);
            }
        }
    }

    pub fn generate_server_config(&self) -> String {
        let user_subnet = env::get_user_subnet();
        format!(
            r"
# Generated by mcsync
# DO NOT TOUCH - Will be overriden anyway.

[Interface]
PrivateKey = {}
Address = {}

# This port doesn't affect your host's listen port. Expose to a different port using Docker.
ListenPort = 51820

# This allows all peers to access the tools subnet (by default 192.168.11.0/29)
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
",
            self.private_key.to_base64(),
            format!("{}/{}", user_subnet.hosts().next().unwrap().to_string(), user_subnet.prefix_len())
        )
    }

    pub fn add_peer(&self, pub_key: String, psk_key: String, ip: String) {
        let peer_template = format!(
            r"
[Peer]
PublicKey = {}
PresharedKey = {}
AllowedIPs = {}/32
",
            pub_key, psk_key, ip
        );

        let file = OpenOptions::new()
            .append(true)
            .open(&self.config_file);

        if file.is_err() {
            error!("Cannot save new peer in WireGuard config file: {}", file.unwrap_err());
            return;
        }

        let mut write = file.unwrap();
        
        match write.write_all(peer_template.as_bytes()) {
            Ok(_) => {},
            Err(error) => {
                error!("WireGuard config file could be opened but not written to: {}", error);
            }
        };
    }
}
