use std::{path::Path, process::exit, fs::OpenOptions, io::Write};

use paris::{error, info};

use crate::database::Database;

pub struct Wireguard {
    database: Database,
    private_key: wireguard_keys::Privkey,
    endpoint: String,
    config_file: String,
}

impl Wireguard {
    pub fn new(database: Database, endpoint: String) -> Self {
        let config_file = match std::env::var("WG_CONFIG") {
            Ok(file_path) => {
                if !Path::new(&file_path).exists() {
                    error!("File {} in WG_CONFIG doesn't exist.", &file_path);
                    exit(1);
                }
                file_path
            }
            Err(_) => {
                info!("Fallback to /vpn/wg0.conf because WG_CONFIG has not been specified.");
                String::from("/vpn/wg0.conf")
            }
        };

        let key = match wireguard_keys::Privkey::from_base64(&database.get_wireguard_private_key())
        {
            Ok(p) => p,
            Err(error) => {
                error!("Fail to parse WireGuard private key. Have you touched it? {}", error);
                exit(1);
            }
        };

        Self {
            private_key: key,
            endpoint,
            config_file,
            database,
        }
    }

    pub fn generate_server_config(&self) -> String {
        format!(
            r"
# Generated by mcsync
# DO NOT TOUCH - Will be overriden anyway.

[Interface]
PrivateKey = {}
Address = {}

# This port doesn't affect your host's listen port. Expose to a different port using Docker.
ListenPort = 51820

# This allows all peers to access the tools subnet (by default 192.168.11.0/29)
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
",
            self.private_key.to_base64(),
            self.endpoint
        )
    }

    pub fn add_peer(&self, pub_key: String, psk_key: String, ip: String) {
        let peer_template = format!(
            r"
[Peer]
PublicKey = {}
PresharedKey = {}
AllowedIPs = {}/32",
            pub_key, psk_key, ip
        );

        let file = OpenOptions::new()
            .append(true)
            .open(&self.config_file);

        if file.is_err() {
            error!("Cannot save new peer in WireGuard config file: {}", file.unwrap_err());
            return;
        }

        let mut write = file.unwrap();
        
        match write.write_all(peer_template.as_bytes()) {
            Ok(_) => {},
            Err(error) => {
                error!("WireGuard config file could be opened but not written to: {}", error);
            }
        };
    }
}
